package com.jwt.service;

import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.OPTIONS;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;
import org.json.JSONObject;

import com.sun.org.apache.xerces.internal.util.SynchronizedSymbolTable;

import db.connect.CheckUser;
import db.connect.Vorgaenge;

/**
 * This class provides all web services.
 */
@Path("/services")
public class Services {

	/**
	 * Gives greetings to an Request. Testable with
	 * https://localhost:8443/RESTfulWebserver/services/Tester.
	 * 
	 * @param name
	 *            path ending of tester
	 * @return Response with status 200 and a JSONObject with greetings.
	 * @throws JSONException
	 */
	@GET
	@Path("/{name}")
	public Response getMsg(@PathParam("name") String name) throws JSONException {
		JSONObject output = new JSONObject("{Welcome : " + name + "}");
		System.out.println("...TestRequest from " + name);
		return Response.status(200).entity(output.toString()).build();
	}

	/**
	 * Checks users authentication.
	 * 
	 * @param urlReq
	 *            with user name and password
	 * @return Response with status 200 and massage for valid user or status 400
	 *         with InvalidRequestBody-message.
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws JSONException
	 * @throws UnsupportedEncodingException
	 */
	@POST
	@Path("/checkUser")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response checkUser(String urlReq)
			throws ClassNotFoundException, SQLException, JSONException, UnsupportedEncodingException {
		JSONObject JSONreq = new JSONObject(urlReq);

		if (JSONreq.has("username") && JSONreq.has("password")) {
			String username = JSONreq.getString("username");
			String password = JSONreq.getString("password");

			JSONObject response = CheckUser.checkUserGetCompanies(username, password, false);

			return Response.status(200).entity(response.toString()).build();
		} else {
			return Response.status(400).entity("InvalidRequestBody").build();
		}
	}

	/**
	 * Adds process to database.
	 * 
	 * @param urlReq
	 *            with user name, password and all process information
	 * @return Response with status 200 and a message or status 400 with
	 *         InvalidRequestBody-message.
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws JSONException
	 * @throws UnsupportedEncodingException
	 */
	@POST
	@Path("/userRegistration")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addProcess(String urlReq)
			throws ClassNotFoundException, SQLException, JSONException, UnsupportedEncodingException {
		JSONObject JSONreq = new JSONObject(urlReq);

		if (JSONreq.has("username") && JSONreq.has("password") && JSONreq.has("email")) {
			try {
				// check users information
				if (!CheckUser.isValid(CheckUser.checkUserGetCompanies(JSONreq.getString("username"),
						JSONreq.getString("password"), false))) {
					return Response.status(400).entity("UserLoginFailure").build();
				}
				// get data
				Integer ref_id = JSONreq.getInt("ref_FF_Gew_ID");
				String ansprechpartner_int = JSONreq.getString("ansprechpartner");
				String datum = JSONreq.getString("date");
				String erfasser = JSONreq.getString("erfasser");
				String bestellnummer = JSONreq.getString("bestellnummer");
				String psp = JSONreq.getString("psp");
				String av_ve = JSONreq.getString("av_ve");
				String av_ff = JSONreq.getString("av_ff");
				String von = JSONreq.getString("von");
				String bis = JSONreq.getString("bis");

				Boolean besetzt;
				if (JSONreq.getBoolean("besetzt"))
					besetzt = true;
				else
					besetzt = false;

				String arbeiten = JSONreq.getString("arbeiten");
				String ort = JSONreq.getString("ort");
				String bemerkungen = JSONreq.getString("bemerkungen");
				String kurztitel = JSONreq.getString("kurztitel");
				String kontraktnummer = JSONreq.getString("kontrakt");
				String begeher = JSONreq.getString("begeher");

				ArrayList<String> answers = new ArrayList<String>();
				for (int i = 1; i <= 20; i++) {
					answers.add(JSONreq.getString("a" + i));
				}

				String doc = JSONreq.getString("doc");
				String doc_name = JSONreq.getString("doc_name");
				String doc_content = JSONreq.getString("doc_content");
				String doc_beschreibung = JSONreq.getString("doc_beschreibung");
				String doc_bemerkung = JSONreq.getString("doc_bemerkung");
				// writeIntoDB
				JSONObject response = Vorgaenge.addProcess(ref_id, ansprechpartner_int, datum, erfasser, bestellnummer,
						psp, av_ve, av_ff, von, bis, besetzt, arbeiten, ort, bemerkungen, kurztitel, kontraktnummer,
						begeher, answers, doc, doc_name, doc_content, doc_beschreibung, doc_bemerkung);

				return Response.status(200).entity(response.toString()).build();

			} catch (Exception e) {
				System.out.println("Wrong JSONFormat:" + e.toString());
			}
		}
		System.out.println("InvalidRequestbody");
		return Response.status(400).entity("InvalidRequestBody").build();
	}

	/**
	 * Sets options for headers.
	 */
	@OPTIONS
	public Response optionsOptions() {
		return Response.ok().header("Allow-Control-Allow-Methods", "POST,GET,OPTIONS")
				.header("Access-Control-Allow-Origin", "*").build();
	}
}
